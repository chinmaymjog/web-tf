---
- name: Creating New PHP Site
  become: true
  hosts: "{{ env }}_webservers"
  vars_files:
  - var_files/web_vars.yml
  - var_files/"{{ env }}"-db.yml

  tasks:
  - name: Checking if config file exist in sites-available
    ansible.builtin.stat:
      path: "/etc/apache2/sites-available/{{ site_url }}.conf"
    register: sites_available
    when:
      - site_url != ""
      
  - name: Progress
    ansible.builtin.debug:
      msg: 
      - "{{ site_url }} already exist"
      - "Other tasks will be skipped"
    when: sites_available.stat.exists == True
   
  - name: Split PHP version string
    set_fact:
      php_name: "{{ php_version | regex_replace('([a-zA-Z]+)([0-9.]+)', '\\1') }}"
      php_number: "{{ php_version | regex_replace('([a-zA-Z]+)([0-9.]+)', '\\2') }}"

  - name: Building site username
    delegate_to: localhost
    delegate_facts: true
    run_once: true  
    ansible.builtin.shell: |
      rndm=$(( 1 + $RANDOM % 1000))
      user=$(echo {{ site_url }} | tr -d [.,-] | sed -e s/indus//g | cut -c 1-10)_$rndm
      echo $user
    register: username
    args:
      executable: /bin/bash
    when: sites_available.stat.exists == False

  - name: Building site user password
    delegate_to: localhost
    delegate_facts: true
    run_once: true
    ansible.builtin.shell: |
      pass=$(openssl rand -hex 12)
      echo $pass
    register: password
    args:
      executable: /bin/bash
    when: sites_available.stat.exists == False

  - name: Creating site user
    vars:
      site_user: "{{ username.stdout }}"
      site_user_pass: "{{ password.stdout }}"
    ansible.builtin.user:
      name: "{{ site_user }}"
      password: "{{ site_user_pass }}"
      groups: web_users
      create_home: false
    when: sites_available.stat.exists == False

  - name: Creating Document root directory
    vars:
      site_user: "{{ username.stdout }}"
    ansible.builtin.file:
      path: "{{ doc_root }}/{{ site_user }}/web"
      state: directory
      recurse: true
      mode: "775"
      owner: "{{ site_user }}"
      group: web_users
    when: sites_available.stat.exists == False

  - name: Creating logs directory
    vars:
      site_user: "{{ username.stdout }}"
    ansible.builtin.file:
      path: "{{ doc_root }}/{{ site_user }}/logs"
      state: directory
      recurse: true
      mode: "755"
      owner: root
      group: web_users
    when: sites_available.stat.exists == False

  - name: Creating php logs directory
    vars:
      site_user: "{{ username.stdout }}"
    ansible.builtin.file:
      path: "{{ doc_root }}/{{ site_user }}/php-fpm-logs"
      state: directory
      recurse: true
      mode: "755"
      owner: "{{ site_user }}"
      group: web_users
    when: sites_available.stat.exists == False

  - name: Touch slow.log
    vars:
      site_user: "{{ username.stdout }}"
    ansible.builtin.file:
      path: "{{ doc_root }}/{{ site_user }}/php-fpm-logs/{{ site_user }}-slow.log"
      state: touch
      owner: "{{ site_user }}"
      group: web_users
    when: sites_available.stat.exists == False

  - name: Touch error.log
    vars:
      site_user: "{{ username.stdout }}"
    ansible.builtin.file:
      path: "{{ doc_root }}/{{ site_user }}/php-fpm-logs/{{ site_user }}-error.log"
      state: touch
      owner: "{{ site_user }}"
      group: web_users
    when: sites_available.stat.exists == False

  - name: Creating sessions directory
    vars:
      site_user: "{{ username.stdout }}"
    ansible.builtin.file:
      path: "{{ doc_root }}/{{ site_user }}/sessions"
      state: directory
      recurse: true
      mode: "775"
      owner: "{{ site_user }}"
      group: web_users
    when: sites_available.stat.exists == False

  - name: Adding default index page
    vars:
      site_user: "{{ username.stdout }}"
    ansible.builtin.shell: |
      echo "<?php phpinfo(); ?>" > {{ doc_root }}/{{ site_user }}/web/index.php
    when: sites_available.stat.exists == False
    args:
      executable: /bin/bash

  - name: Creating site VHOST config
    vars:
      site_user: "{{ username.stdout }}"
    ansible.builtin.template:
      src: ../templates/vhost_php.j2
      dest: "{{ apache2_conf }}/{{ site_url }}.conf"
      mode: "644"
    when: sites_available.stat.exists == False

  - name: Creating php-fpm config
    vars:
      site_user: "{{ username.stdout }}"
      site_group: "{{ username.stdout }}"
    ansible.builtin.template:
      src: templates/php_fpm.j2
      dest: "/etc/php/{{ php_number }}/fpm/pool.d/{{ site_url }}.conf"
      mode: "644"
    when: sites_available.stat.exists == False

  - name: Start PHP-FPM service for {{ site_url }}
    ansible.builtin.systemd:
      name: "{{ php_version }}-fpm@{{ site_url }}"
      enabled: true
      state: started
    when: sites_available.stat.exists == False

  - name: Enable site
    ansible.builtin.shell: a2ensite {{ site_url }}
    when: sites_available.stat.exists == False

  - name: Restart apache2
    ansible.builtin.systemd:
      name: apache2
      state: restarted

  - name: Creating database
    delegate_to: localhost
    delegate_facts: true
    run_once: true
    vars:
      site_user: "{{ username.stdout }}"
    community.mysql.mysql_db:
      login_host: "{{ db_host }}"
      login_port: "{{ db_port }}"
      login_user: "{{ db_user }}"
      login_password: "{{ db_pass }}"
      name: "{{ site_user }}"
      state: present
    when: sites_available.stat.exists == False
  
  - name: Creating databse user
    delegate_to: localhost
    delegate_facts: true
    run_once: true
    vars:
      site_user: "{{ username.stdout }}"
      site_user_pass: "{{ password.stdout }}"
    community.mysql.mysql_user:
      login_host: "{{ db_host }}"
      login_port: "{{ db_port }}"
      login_user: "{{ db_user }}"
      login_password: "{{ db_pass }}"
      name: "{{ site_user }}"
      password: "{{ site_user_pass }}"
      host: "%"
      priv: "{{ username.stdout }}.*:ALL,GRANT"
    when: sites_available.stat.exists == False

  - name: Output
    vars:
      site_user: "{{ username.stdout }}"
      site_user_pass: "{{ password.stdout }}"
    ansible.builtin.debug:
      msg:
      - "PHP site {{ site_url }} has been added successfully"
      - "Site Name: {{ site_url }}"
      - "PHP Version: {{ php_version }}"
      - "Database User: {{ site_user }}"
      - "Database Password: {{ site_user_pass }}"
      - "Database Name: {{ site_user }}"
      - "Databse Host: {{ db_host }}"
      - "Databse Port: {{ db_port }}"
    when: sites_available.stat.exists == False

  - name: Local Output
    delegate_to: localhost
    delegate_facts: true
    run_once: true
    vars:
      site_user: "{{ username.stdout }}"
      site_user_pass: "{{ password.stdout }}"
    ansible.builtin.shell: |
      echo {{ site_url }}'\t'{{ site_user }}'\t'{{ site_user_pass }}'\t'{{ php_version }} >> ~/site_index.txt
    when: sites_available.stat.exists == False